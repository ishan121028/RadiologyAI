# CriticalAlert AI Configuration
# Similar to demo-question-answering/app.yaml but specialized for radiology reports

# Data sources - incoming radiology report PDFs  
$sources: !pw.io.fs.read
  path: data/incoming
  format: binary
  with_metadata: true
  mode: streaming

# LLM for alert generation and medical recommendations
$llm: !pw.xpacks.llm.llms.LiteLLMChat
  model: "anthropic/claude-3-5-sonnet-20241022"
  api_key: $ANTHROPIC_API_KEY
  retry_strategy: !pw.udfs.ExponentialBackoffRetryStrategy
    max_retries: 6
  cache_strategy: !pw.udfs.DefaultCache {}
  temperature: 0
  capacity: 8

# Embedder for semantic search using sentence transformers
$embedder: !pw.xpacks.llm.embedders.SentenceTransformerEmbedder
  model: "all-MiniLM-L12-v2"

# Text splitter for medical documents (larger chunks preserve medical context)
$splitter: !pw.xpacks.llm.splitters.TokenCountSplitter
  max_tokens: 800
  min_tokens: 200

# Parser for medical documents using LandingAI
$parser: !src.parsers.landingai_parser.LandingAIRadiologyParser
  api_key: $LANDINGAI_API_KEY

# Retriever factory for indexing and retrieving documents
$retriever_factory: !pw.stdlib.indexing.BruteForceKnnFactory
  reserved_space: 1000
  embedder: $embedder
  metric: !pw.stdlib.indexing.BruteForceKnnMetricKind.COS

# Document store for radiology reports using DocumentStore inheritance
$document_store: !src.parsers.landingai_parser.RadiologyDocumentStore
  docs: $sources
  retriever_factory: $retriever_factory
  splitter: $splitter
  landingai_api_key: $LANDINGAI_API_KEY
  # cache_strategy removed to prevent Pydantic serialization issues

# Use Pathway's built-in BaseRAGQuestionAnswerer directly
question_answerer: !pw.xpacks.llm.question_answering.BaseRAGQuestionAnswerer
  llm: $llm
  indexer: $document_store
  search_topk: 6

# Server configuration
host: "0.0.0.0"
port: 49001

# Processing configuration (commented out for simple App class)
# max_processing_time: 30
# enable_real_time_alerts: true
# alert_escalation_enabled: true

# Cache configuration - activate on-disk caching for UDFs
with_cache: true

# Error handling - continue processing even if some documents fail
terminate_on_error: false

# Cache backend for persistence (commented out for simple App class)
# cache_backend: !pw.persistence.Backend.filesystem
#   path: "data/cache"
